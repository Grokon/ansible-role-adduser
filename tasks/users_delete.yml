---
# Check users that need to be deleted
- name: Find stats files without user
  ansible.builtin.find:
    paths: "{{ adduser__stats_file_path }}"
    file_type: file
    patterns:
      - user_(?!{{ adduser__users | map(attribute='name') | join('|') }}).*\.yaml
    use_regex: true
  register: __user_stats_files

# This playbook removes users from the system.
- name: Set facts with user list
  ansible.builtin.set_fact:
    __user_list:
      "{{ __user_stats_files.files | map(attribute='path') | map('basename') |
      map('regex_replace', 'user_', '') | map('regex_replace', '.yaml', '') | list }}"
  when: __user_stats_files.files | length

- name: Delete user
  become: true
  ansible.builtin.user:
    name: "{{ item }}"
    state: absent
    remove: true
  with_items: "{{ __user_list }}"
  when: __user_stats_files.files | length

- name: Delete per user group
  become: true
  ansible.builtin.group:
    name: "{{ item }}"
    state: absent
  with_items: "{{ __user_list }}"
  when: adduser__create_per_user_group and __user_stats_files.files | length

  # Edit sudoers
- name: Edit sudoers
  become: true
  community.general.sudoers:
    name: "{{ item }}"
    state: absent
    user: "{{ item }}"
  with_items: "{{ __user_list }}"
  when: __user_stats_files.files | length

- name: Delete user stats file
  become: false
  ansible.builtin.file:
    path: "{{ adduser__stats_file_path }}/user_{{ item }}.yaml"
    state: absent
  with_items: "{{ __user_list }}"
  when: __user_stats_files.files | length
